# note: no :deploy task
task :handout => ['ciphertext','instructions.txt']

def xor_with text, password
  password = password.bytes
  text.bytes.each_with_index.map { |b, i| (b ^ password[i % password.length]).chr }.join
end

generated_file 'instructions.txt' do
  puts 'The file called ciphertext contains a XOR encrypted message. Decipher the message to find the flag.'
end

generated_file 'ciphertext' do
  flag = random_flag
  key_len = random_number 8..12
  key = random_bytes key_len
  plaintext = "The XOR operator is extremely common as a component in more complex ciphers. By itself, using a constant repeating key, a simple XOR cipher can trivially be broken using frequency analysis. If the content of any message can be guessed or otherwise known then the key can be revealed. Its primary merit is that it is simple to implement, and that the XOR operation is computationally inexpensive. A simple repeating XOR (i.e. using the same key for xor operation on the whole data) cipher is therefore sometimes used for hiding information in cases where no particular security is required.

If the key is random and is at least as long as the message, the XOR cipher is much more secure than when there is key repetition within a message. When the keystream is generated by a pseudo-random number generator, the result is a stream cipher. With a key that is truly random, the result is a one-time pad, which is unbreakable even in theory.

In any of these ciphers, the XOR operator is vulnerable to a known-plaintext attack, since plaintext ^ ciphertext = key. (From Wikipedia)

  #{flag}"
  print xor_with(plaintext, key)
end

task :description => 'description.html.erb'

generated_file 'description.html.erb' do
  puts <<EOF
  <a href="<%= handout_url %>">This file</a> contains a secret message encrypted with the all mighty XOR encryption. Recover the message!
EOF
end